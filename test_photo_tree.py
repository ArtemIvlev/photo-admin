import os
import logging
from database import Database
from photo_tree import PhotoTree

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_photo_tree():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ PhotoTree
    """
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db = Database()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not db.connect():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        photos = db.get_all_photos()
        logger.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –±–∞–∑—ã: {len(photos)}")
        if photos:
            logger.info("–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏:")
            logger.info(photos[0])
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ—Ä–µ–≤–∞
        tree = PhotoTree(db, base_path="/mnt/smb/OneDrive/Pictures/!–§–æ—Ç–æ—Å–µ—Å—Å–∏–∏")
        
        # –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
        logger.info("üîÑ –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –ø—É—Ç–µ–π...")
        tree.build_tree()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logger.info("üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        stats = tree.get_statistics()
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
        def print_tree(node, level=0):
            indent = "  " * level
            for dir_name, dir_node in sorted(node['dirs'].items()):
                logger.info(f"{indent}üìÅ {dir_name}/")
                print_tree(dir_node, level + 1)
        
        logger.info("\n–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–µ—Ä–µ–≤–∞:")
        print_tree(tree.tree)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if stats['directories'] > 0:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–∑ –¥–µ—Ä–µ–≤–∞
            first_dir = next(iter(tree.tree['dirs'].keys()))
            logger.info(f"\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{first_dir}':")
            contents = tree.get_directory_contents(first_dir)
            if contents:
                logger.info(f"–§–∞–π–ª—ã: {len(contents['files'])}")
                logger.info(f"–ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {contents['directories']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
        if stats['total_files'] > 0:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∏–∑ –¥–µ—Ä–µ–≤–∞
            first_file = tree.tree['files'][0]['path'] if tree.tree['files'] else None
            if first_file:
                logger.info(f"\nüìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ '{os.path.basename(first_file)}':")
                file_info = tree.get_file_info(first_file)
                if file_info:
                    logger.info(f"–ü—É—Ç—å: {file_info['path']}")
                    logger.info(f"–û–±–Ω–∞–∂–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {file_info['is_nude']}")
                    logger.info(f"–ï—Å—Ç—å –ª–∏—Ü–∞: {file_info['has_face']}")
                    logger.info(f"–°—Ç–∞—Ç—É—Å: {file_info['status']}")
                    logger.info(f"NSFW score: {file_info['nsfw_score']}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        db.close()
        logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    test_photo_tree() 