import React, { useState, useEffect } from 'react';
import './PhotoGrid.css';

const PhotoGrid = () => {
    const [photos, setPhotos] = useState([]);
    const [selectedPhotos, setSelectedPhotos] = useState(new Set());
    const [currentPath, setCurrentPath] = useState('');
    const [filterStatus, setFilterStatus] = useState('all');
    const [modifiedPhotos, setModifiedPhotos] = useState({});
    const [isSaving, setIsSaving] = useState(false);
    const [sortDirection, setSortDirection] = useState('asc'); // 'asc' –∏–ª–∏ 'desc'

    useEffect(() => {
        const handleDirectorySelected = (event) => {
            setCurrentPath(event.detail.path);
            setPhotos(event.detail.files || []);
            setSelectedPhotos(new Set());
            setModifiedPhotos({}); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        };

        document.addEventListener('directorySelected', handleDirectorySelected);
        return () => {
            document.removeEventListener('directorySelected', handleDirectorySelected);
        };
    }, []);

    const getThumbnailUrl = (photoPath) => {
        return `/api/photo/${encodeURIComponent(photoPath)}`;
    };

    const togglePhotoSelection = (photoPath) => {
        setSelectedPhotos(prev => {
            const newSet = new Set(prev);
            if (newSet.has(photoPath)) {
                newSet.delete(photoPath);
            } else {
                newSet.add(photoPath);
            }
            return newSet;
        });
    };

    const getStatusLabel = (status) => {
        const labels = {
            'approved': '‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ',
            'rejected': '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
            'pending': '‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
            'normal': 'üì∑ –û–±—ã—á–Ω–æ–µ',
            'published': 'üåê –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'
        };
        return labels[status] || status;
    };

    const cyclePhotoStatus = (photoPath, currentStatus, e) => {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å –≤ —Ü–∏–∫–ª–µ
        const statusCycle = ['normal', 'pending', 'approved', 'rejected', 'published'];
        const currentIndex = statusCycle.indexOf(currentStatus);
        const nextIndex = (currentIndex + 1) % statusCycle.length;
        const nextStatus = statusCycle[nextIndex];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        setModifiedPhotos(prev => ({
            ...prev,
            [photoPath]: nextStatus
        }));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        setPhotos(prevPhotos => 
            prevPhotos.map(photo => 
                photo.path === photoPath 
                    ? { ...photo, status: nextStatus } 
                    : photo
            )
        );
        
        console.log(`–°—Ç–∞—Ç—É—Å —Ñ–æ—Ç–æ ${photoPath} –∏–∑–º–µ–Ω–µ–Ω —Å ${currentStatus} –Ω–∞ ${nextStatus}`);
    };

    const getPhotoStatus = (photo) => {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
        return modifiedPhotos[photo.path] || photo.status;
    };

    const saveChanges = async () => {
        if (Object.keys(modifiedPhotos).length === 0) {
            return; // –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        }

        setIsSaving(true);
        try {
            const response = await fetch('/api/update_statuses', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    updates: Object.entries(modifiedPhotos).map(([path, status]) => ({
                        path,
                        status
                    }))
                }),
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
            }

            const result = await response.json();
            console.log('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', result);
            
            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            setModifiedPhotos({});
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –Ω–æ–≤—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–∑ –±–∞–∑—ã
            const updatedPhotos = photos.map(photo => {
                if (modifiedPhotos[photo.path]) {
                    return { ...photo, status: modifiedPhotos[photo.path] };
                }
                return photo;
            });
            setPhotos(updatedPhotos);
            
            alert('–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ' + error.message);
        } finally {
            setIsSaving(false);
        }
    };

    const toggleSort = () => {
        setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');
    };

    const getSortedPhotos = (photosToSort) => {
        return [...photosToSort].sort((a, b) => {
            const nameA = a.path.split('/').pop().toLowerCase();
            const nameB = b.path.split('/').pop().toLowerCase();
            return sortDirection === 'asc' 
                ? nameA.localeCompare(nameB)
                : nameB.localeCompare(nameA);
        });
    };

    const filteredPhotos = filterStatus === 'all' 
        ? photos 
        : photos.filter(photo => getPhotoStatus(photo) === filterStatus);

    const sortedPhotos = getSortedPhotos(filteredPhotos);

    const hasChanges = Object.keys(modifiedPhotos).length > 0;

    return (
        <div className="photo-grid-container">
            <div className="filters-container">
                <button 
                    className={`filter-button ${filterStatus === 'all' ? 'active' : ''}`}
                    onClick={() => setFilterStatus('all')}
                >
                    –í—Å–µ
                </button>
                <button 
                    className={`filter-button ${filterStatus === 'approved' ? 'active' : ''}`}
                    onClick={() => setFilterStatus('approved')}
                >
                    –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ
                </button>
                <button 
                    className={`filter-button ${filterStatus === 'rejected' ? 'active' : ''}`}
                    onClick={() => setFilterStatus('rejected')}
                >
                    –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ
                </button>
                <button 
                    className={`filter-button ${filterStatus === 'pending' ? 'active' : ''}`}
                    onClick={() => setFilterStatus('pending')}
                >
                    –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ
                </button>
                <button 
                    className={`filter-button ${filterStatus === 'normal' ? 'active' : ''}`}
                    onClick={() => setFilterStatus('normal')}
                >
                    –û–±—ã—á–Ω—ã–µ
                </button>
                <button 
                    className={`filter-button ${filterStatus === 'published' ? 'active' : ''}`}
                    onClick={() => setFilterStatus('published')}
                >
                    –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
                </button>
                
                <button 
                    className="sort-button"
                    onClick={toggleSort}
                >
                    –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ {sortDirection === 'asc' ? '‚Üë' : '‚Üì'}
                </button>
                
                {hasChanges && (
                    <button 
                        className="save-button"
                        onClick={saveChanges}
                        disabled={isSaving}
                    >
                        {isSaving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'}
                    </button>
                )}
            </div>

            {sortedPhotos.length === 0 ? (
                <div className="no-photos">
                    –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —ç—Ç–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                </div>
            ) : (
                <div className="photo-grid">
                    {sortedPhotos.map(photo => {
                        const currentStatus = getPhotoStatus(photo);
                        return (
                            <div 
                                key={photo.path}
                                className={`photo-preview ${selectedPhotos.has(photo.path) ? 'selected' : ''}`}
                                onClick={() => togglePhotoSelection(photo.path)}
                            >
                                <img 
                                    src={getThumbnailUrl(photo.path)}
                                    alt={photo.path.split('/').pop()}
                                    loading="lazy"
                                    onError={(e) => {
                                        e.target.src = '/static/img/error-placeholder.png';
                                    }}
                                />
                                <div className="photo-info">
                                    <div className="photo-name">
                                        {photo.path.split('/').pop()}
                                    </div>
                                    <div 
                                        className={`photo-status ${currentStatus}`}
                                        onClick={(e) => cyclePhotoStatus(photo.path, currentStatus, e)}
                                    >
                                        {getStatusLabel(currentStatus)}
                                    </div>
                                    {photo.has_face && <div className="photo-has-face">üë§</div>}
                                    {photo.is_nude && <div className="photo-is-nude">üîû</div>}
                                </div>
                            </div>
                        );
                    })}
                </div>
            )}
        </div>
    );
};

export default PhotoGrid; 